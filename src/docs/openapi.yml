openapi: 3.0.0
info:
  title: My Rest API
  version: 0.0.0
  description: |
    # Introduction
    This is the API documentation of **My Rest API**. It is documented in *OpenAPI* format.

    # Authentication
    My Rest API uses **JWT** Bearer authentication to authenticate requests.

    Protected endpoints require an HTTP Bearer Authorization header in the form of:

    ```
    Authorization: Bearer <token>
    ```

    <SecurityDefinitions />

    # Errors

    This API uses conventional HTTP response codes to indicate the success or failure of an API request.

    All errors are in the following format:

    | Attribute   | Type     | Description                                                 |
    |-------------|----------|-------------------------------------------------------------|
    | **status**  | *number* | HTTP response code (`2xx`, `4xx`, `500`)                    |
    | **name**    | *string* | Name of the error (`ValidationError`, `NotFoundError`, etc) |
    | **message** | *string* | A readable error message
servers:
  - url: http://localhost:8080/api
    description: Local development server
paths:
  /:
    get:
      summary: Base route
      responses:
        200:
          description: OK
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    204:
      description: No Content
    400:
      description: Bad Request - Invalid or missing request parameters / body
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HttpError'
    404:
      description: Not Found - Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HttpError'
    401:
      description: Unauthorized - Invalid or missing authorization token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HttpError'
    403:
      description: Forbidden - Access forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/HttpError'
  schemas:
    Token:
      description: JWT token
      properties:
        access_token:
          type: string
        expires_in:
          type: integer
        refresh_token:
          type: string
    HttpError:
      properties:
        status:
          type: number
        name:
          type: string
        message:
          type: string
